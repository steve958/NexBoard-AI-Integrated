rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /projects/{projectId} {
      // Create: allow if the creator is the owner and included as a member in the incoming doc
      allow create: if request.auth != null
        && request.resource.data.ownerId == request.auth.uid
        && request.auth.uid in request.resource.data.members;
      // Read existing projects where the user is a member
      allow read: if request.auth != null && request.auth.uid in resource.data.members;
      // Only owner can update or delete the project (rename, archive, manage members)
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.ownerId;
    }
    match /projects/{projectId}/tasks/{taskId} {
      allow read, write: if request.auth != null &&
        (request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.members);
    }
    match /projects/{projectId}/columns/{columnId} {
      allow read, write: if request.auth != null &&
        (request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.members);
    }
    match /users/{uid} {
      // Allow authenticated users to read basic user profiles (minimal PII)
      allow read: if request.auth != null;
      // Only the user can write their own profile
      allow write: if request.auth != null && request.auth.uid == uid;
    }
  }
}
